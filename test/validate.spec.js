
const should = require('chai').should();
const assert = require('chai').assert;
const expect = require('chai').expect;

const VtexUtils = require('./../dist/vtex-utils.common.js');
const vtexUtils = new VtexUtils();
const globalHelpers = vtexUtils.globalHelpers;

describe('Validate Methods', () => {
    // Array
    const arr = [];
    const newArr = new Array();
    // Boolean
    const _true = true;
    const _false = false;
    const newTrue = new Boolean(true);
    const newFalse = new Boolean(false);
    // Char
    const charLower = 'a';
    const charUpper = 'A';
    // Date
    const date = new Date();
    // DOM Node
    const body = document.querySelector('body');
    // Email
    const validEmail = 'email@email.com';
    const invalidEmail = 'email@email';
    // Empty
    const emptyStr = '';
    // Error
    const newError = new Error();
    const newTypeError = new TypeError();
    // Function
    const fn = function() {};
    const arrowFn = () => {};
    // JSON
    const json = `{"foo": "Foo", "bar": "Bar", "baz": ["1", "2", "3"]}`;
    // Null
    const _null = null;
    // Number
    const number = 999;
    const _Number = Number('999');
    const int = 999;
    const float = 0.999;
    // Object
    const obj = {};
    const newObj = new Object();
    // RegExp
    const regexp = /^[0-9]/;
    const newRegexp = new RegExp('ab+c', 'i');
    // String
    const string = 'foo, bar';
    // Undefined
    const _undefined = undefined;

    it('is array', (done) => {
        expect(globalHelpers.isArray(arr)).to.equal(true);
        expect(globalHelpers.isArray(newArr)).to.equal(true);
        expect(globalHelpers.isArray(_true)).to.equal(false);
        expect(globalHelpers.isArray(_false)).to.equal(false);
        expect(globalHelpers.isArray(newTrue)).to.equal(false);
        expect(globalHelpers.isArray(newFalse)).to.equal(false);
        expect(globalHelpers.isArray(charLower)).to.equal(false);
        expect(globalHelpers.isArray(charUpper)).to.equal(false);
        expect(globalHelpers.isArray(date)).to.equal(false);
        expect(globalHelpers.isArray(body)).to.equal(false);
        expect(globalHelpers.isArray(validEmail)).to.equal(false);
        expect(globalHelpers.isArray(invalidEmail)).to.equal(false);
        expect(globalHelpers.isArray(emptyStr)).to.equal(false);
        expect(globalHelpers.isArray(newError)).to.equal(false);
        expect(globalHelpers.isArray(newTypeError)).to.equal(false);
        expect(globalHelpers.isArray(fn)).to.equal(false);
        expect(globalHelpers.isArray(arrowFn)).to.equal(false);
        expect(globalHelpers.isArray(json)).to.equal(false);
        expect(globalHelpers.isArray(_null)).to.equal(false);
        expect(globalHelpers.isArray(number)).to.equal(false);
        expect(globalHelpers.isArray(_Number)).to.equal(false);
        expect(globalHelpers.isArray(int)).to.equal(false);
        expect(globalHelpers.isArray(float)).to.equal(false);
        expect(globalHelpers.isArray(obj)).to.equal(false);
        expect(globalHelpers.isArray(newObj)).to.equal(false);
        expect(globalHelpers.isArray(regexp)).to.equal(false);
        expect(globalHelpers.isArray(newRegexp)).to.equal(false);
        expect(globalHelpers.isArray(string)).to.equal(false);
        expect(globalHelpers.isArray(_undefined)).to.equal(false);
        done();
    });

    it('is boolean', (done) => {
        expect(globalHelpers.isBoolean(arr)).to.equal(false);
        expect(globalHelpers.isBoolean(newArr)).to.equal(false);
        expect(globalHelpers.isBoolean(_true)).to.equal(true);
        expect(globalHelpers.isBoolean(_false)).to.equal(true);
        expect(globalHelpers.isBoolean(newTrue)).to.equal(true);
        expect(globalHelpers.isBoolean(newFalse)).to.equal(true);
        expect(globalHelpers.isBoolean(charLower)).to.equal(false);
        expect(globalHelpers.isBoolean(charUpper)).to.equal(false);
        expect(globalHelpers.isBoolean(date)).to.equal(false);
        expect(globalHelpers.isBoolean(body)).to.equal(false);
        expect(globalHelpers.isBoolean(validEmail)).to.equal(false);
        expect(globalHelpers.isBoolean(invalidEmail)).to.equal(false);
        expect(globalHelpers.isBoolean(emptyStr)).to.equal(false);
        expect(globalHelpers.isBoolean(newError)).to.equal(false);
        expect(globalHelpers.isBoolean(newTypeError)).to.equal(false);
        expect(globalHelpers.isBoolean(fn)).to.equal(false);
        expect(globalHelpers.isBoolean(arrowFn)).to.equal(false);
        expect(globalHelpers.isBoolean(json)).to.equal(false);
        expect(globalHelpers.isBoolean(_null)).to.equal(false);
        expect(globalHelpers.isBoolean(number)).to.equal(false);
        expect(globalHelpers.isBoolean(_Number)).to.equal(false);
        expect(globalHelpers.isBoolean(int)).to.equal(false);
        expect(globalHelpers.isBoolean(float)).to.equal(false);
        expect(globalHelpers.isBoolean(obj)).to.equal(false);
        expect(globalHelpers.isBoolean(newObj)).to.equal(false);
        expect(globalHelpers.isBoolean(regexp)).to.equal(false);
        expect(globalHelpers.isBoolean(newRegexp)).to.equal(false);
        expect(globalHelpers.isBoolean(string)).to.equal(false);
        expect(globalHelpers.isBoolean(_undefined)).to.equal(false);
        done();
    });

    it('is char', (done) => {
        expect(globalHelpers.isChar(arr)).to.equal(false);
        expect(globalHelpers.isChar(newArr)).to.equal(false);
        expect(globalHelpers.isChar(_true)).to.equal(false);
        expect(globalHelpers.isChar(_false)).to.equal(false);
        expect(globalHelpers.isChar(newTrue)).to.equal(false);
        expect(globalHelpers.isChar(newFalse)).to.equal(false);
        expect(globalHelpers.isChar(charLower)).to.equal(true);
        expect(globalHelpers.isChar(charUpper)).to.equal(true);
        expect(globalHelpers.isChar(date)).to.equal(false);
        expect(globalHelpers.isChar(body)).to.equal(false);
        expect(globalHelpers.isChar(validEmail)).to.equal(false);
        expect(globalHelpers.isChar(invalidEmail)).to.equal(false);
        expect(globalHelpers.isChar(emptyStr)).to.equal(false);
        expect(globalHelpers.isChar(newError)).to.equal(false);
        expect(globalHelpers.isChar(newTypeError)).to.equal(false);
        expect(globalHelpers.isChar(fn)).to.equal(false);
        expect(globalHelpers.isChar(arrowFn)).to.equal(false);
        expect(globalHelpers.isChar(json)).to.equal(false);
        expect(globalHelpers.isChar(_null)).to.equal(false);
        expect(globalHelpers.isChar(number)).to.equal(false);
        expect(globalHelpers.isChar(_Number)).to.equal(false);
        expect(globalHelpers.isChar(int)).to.equal(false);
        expect(globalHelpers.isChar(float)).to.equal(false);
        expect(globalHelpers.isChar(obj)).to.equal(false);
        expect(globalHelpers.isChar(newObj)).to.equal(false);
        expect(globalHelpers.isChar(regexp)).to.equal(false);
        expect(globalHelpers.isChar(newRegexp)).to.equal(false);
        expect(globalHelpers.isChar(string)).to.equal(false);
        expect(globalHelpers.isChar(_undefined)).to.equal(false);
        done();
    });

    it('is date', (done) => {
        expect(globalHelpers.isDate(arr)).to.equal(false);
        expect(globalHelpers.isDate(newArr)).to.equal(false);
        expect(globalHelpers.isDate(_true)).to.equal(false);
        expect(globalHelpers.isDate(_false)).to.equal(false);
        expect(globalHelpers.isDate(newTrue)).to.equal(false);
        expect(globalHelpers.isDate(newFalse)).to.equal(false);
        expect(globalHelpers.isDate(charLower)).to.equal(false);
        expect(globalHelpers.isDate(charUpper)).to.equal(false);
        expect(globalHelpers.isDate(date)).to.equal(true);
        expect(globalHelpers.isDate(body)).to.equal(false);
        expect(globalHelpers.isDate(validEmail)).to.equal(false);
        expect(globalHelpers.isDate(invalidEmail)).to.equal(false);
        expect(globalHelpers.isDate(emptyStr)).to.equal(false);
        expect(globalHelpers.isDate(newError)).to.equal(false);
        expect(globalHelpers.isDate(newTypeError)).to.equal(false);
        expect(globalHelpers.isDate(fn)).to.equal(false);
        expect(globalHelpers.isDate(arrowFn)).to.equal(false);
        expect(globalHelpers.isDate(json)).to.equal(false);
        expect(globalHelpers.isDate(_null)).to.equal(false);
        expect(globalHelpers.isDate(number)).to.equal(false);
        expect(globalHelpers.isDate(_Number)).to.equal(false);
        expect(globalHelpers.isDate(int)).to.equal(false);
        expect(globalHelpers.isDate(float)).to.equal(false);
        expect(globalHelpers.isDate(obj)).to.equal(false);
        expect(globalHelpers.isDate(newObj)).to.equal(false);
        expect(globalHelpers.isDate(regexp)).to.equal(false);
        expect(globalHelpers.isDate(newRegexp)).to.equal(false);
        expect(globalHelpers.isDate(string)).to.equal(false);
        expect(globalHelpers.isDate(_undefined)).to.equal(false);
        done();
    });

    it('is dom node', (done) => {
        expect(globalHelpers.isDomNode(arr)).to.equal(false);
        expect(globalHelpers.isDomNode(newArr)).to.equal(false);
        expect(globalHelpers.isDomNode(_true)).to.equal(false);
        expect(globalHelpers.isDomNode(_false)).to.equal(false);
        expect(globalHelpers.isDomNode(newTrue)).to.equal(false);
        expect(globalHelpers.isDomNode(newFalse)).to.equal(false);
        expect(globalHelpers.isDomNode(charLower)).to.equal(false);
        expect(globalHelpers.isDomNode(charUpper)).to.equal(false);
        expect(globalHelpers.isDomNode(date)).to.equal(false);
        expect(globalHelpers.isDomNode(body)).to.equal(true);
        expect(globalHelpers.isDomNode(validEmail)).to.equal(false);
        expect(globalHelpers.isDomNode(invalidEmail)).to.equal(false);
        expect(globalHelpers.isDomNode(emptyStr)).to.equal(false);
        expect(globalHelpers.isDomNode(newError)).to.equal(false);
        expect(globalHelpers.isDomNode(newTypeError)).to.equal(false);
        expect(globalHelpers.isDomNode(fn)).to.equal(false);
        expect(globalHelpers.isDomNode(arrowFn)).to.equal(false);
        expect(globalHelpers.isDomNode(json)).to.equal(false);
        expect(globalHelpers.isDomNode(_null)).to.equal(false);
        expect(globalHelpers.isDomNode(number)).to.equal(false);
        expect(globalHelpers.isDomNode(_Number)).to.equal(false);
        expect(globalHelpers.isDomNode(int)).to.equal(false);
        expect(globalHelpers.isDomNode(float)).to.equal(false);
        expect(globalHelpers.isDomNode(obj)).to.equal(false);
        expect(globalHelpers.isDomNode(newObj)).to.equal(false);
        expect(globalHelpers.isDomNode(regexp)).to.equal(false);
        expect(globalHelpers.isDomNode(newRegexp)).to.equal(false);
        expect(globalHelpers.isDomNode(string)).to.equal(false);
        expect(globalHelpers.isDomNode(_undefined)).to.equal(false);
        done();
    });

    it('is email', (done) => {
        expect(globalHelpers.isEmail(arr)).to.equal(false);
        expect(globalHelpers.isEmail(newArr)).to.equal(false);
        expect(globalHelpers.isEmail(_true)).to.equal(false);
        expect(globalHelpers.isEmail(_false)).to.equal(false);
        expect(globalHelpers.isEmail(newTrue)).to.equal(false);
        expect(globalHelpers.isEmail(newFalse)).to.equal(false);
        expect(globalHelpers.isEmail(charLower)).to.equal(false);
        expect(globalHelpers.isEmail(charUpper)).to.equal(false);
        expect(globalHelpers.isEmail(date)).to.equal(false);
        expect(globalHelpers.isEmail(body)).to.equal(false);
        expect(globalHelpers.isEmail(validEmail)).to.equal(true);
        expect(globalHelpers.isEmail(invalidEmail)).to.equal(false);
        expect(globalHelpers.isEmail(emptyStr)).to.equal(false);
        expect(globalHelpers.isEmail(newError)).to.equal(false);
        expect(globalHelpers.isEmail(newTypeError)).to.equal(false);
        expect(globalHelpers.isEmail(fn)).to.equal(false);
        expect(globalHelpers.isEmail(arrowFn)).to.equal(false);
        expect(globalHelpers.isEmail(json)).to.equal(false);
        expect(globalHelpers.isEmail(_null)).to.equal(false);
        expect(globalHelpers.isEmail(number)).to.equal(false);
        expect(globalHelpers.isEmail(_Number)).to.equal(false);
        expect(globalHelpers.isEmail(int)).to.equal(false);
        expect(globalHelpers.isEmail(float)).to.equal(false);
        expect(globalHelpers.isEmail(obj)).to.equal(false);
        expect(globalHelpers.isEmail(newObj)).to.equal(false);
        expect(globalHelpers.isEmail(regexp)).to.equal(false);
        expect(globalHelpers.isEmail(newRegexp)).to.equal(false);
        expect(globalHelpers.isEmail(string)).to.equal(false);
        expect(globalHelpers.isEmail(_undefined)).to.equal(false);
        done();
    });

    it('is empty', (done) => {
        expect(globalHelpers.isEmpty(arr)).to.equal(true);
        expect(globalHelpers.isEmpty(newArr)).to.equal(true);
        expect(globalHelpers.isEmpty(_true)).to.equal(false);
        expect(globalHelpers.isEmpty(_false)).to.equal(false);
        expect(globalHelpers.isEmpty(newTrue)).to.equal(true);
        expect(globalHelpers.isEmpty(newFalse)).to.equal(true);
        expect(globalHelpers.isEmpty(charLower)).to.equal(false);
        expect(globalHelpers.isEmpty(charUpper)).to.equal(false);
        expect(globalHelpers.isEmpty(date)).to.equal(true);
        expect(globalHelpers.isEmpty(body)).to.equal(true);
        expect(globalHelpers.isEmpty(validEmail)).to.equal(false);
        expect(globalHelpers.isEmpty(invalidEmail)).to.equal(false);
        expect(globalHelpers.isEmpty(emptyStr)).to.equal(true);
        expect(globalHelpers.isEmpty(newError)).to.equal(false);
        expect(globalHelpers.isEmpty(newTypeError)).to.equal(false);
        expect(globalHelpers.isEmpty(fn)).to.equal(false);
        expect(globalHelpers.isEmpty(arrowFn)).to.equal(false);
        expect(globalHelpers.isEmpty(json)).to.equal(false);
        expect(globalHelpers.isEmpty(_null)).to.equal(false);
        expect(globalHelpers.isEmpty(number)).to.equal(false);
        expect(globalHelpers.isEmpty(_Number)).to.equal(false);
        expect(globalHelpers.isEmpty(int)).to.equal(false);
        expect(globalHelpers.isEmpty(float)).to.equal(false);
        expect(globalHelpers.isEmpty(obj)).to.equal(true);
        expect(globalHelpers.isEmpty(newObj)).to.equal(true);
        expect(globalHelpers.isEmpty(regexp)).to.equal(false);
        expect(globalHelpers.isEmpty(newRegexp)).to.equal(false);
        expect(globalHelpers.isEmpty(string)).to.equal(false);
        expect(globalHelpers.isEmpty(_undefined)).to.equal(false);
        done();
    });

    it('is error', (done) => {
        expect(globalHelpers.isError(arr)).to.equal(false);
        expect(globalHelpers.isError(newArr)).to.equal(false);
        expect(globalHelpers.isError(_true)).to.equal(false);
        expect(globalHelpers.isError(_false)).to.equal(false);
        expect(globalHelpers.isError(newTrue)).to.equal(false);
        expect(globalHelpers.isError(newFalse)).to.equal(false);
        expect(globalHelpers.isError(charLower)).to.equal(false);
        expect(globalHelpers.isError(charUpper)).to.equal(false);
        expect(globalHelpers.isError(date)).to.equal(false);
        expect(globalHelpers.isError(body)).to.equal(false);
        expect(globalHelpers.isError(validEmail)).to.equal(false);
        expect(globalHelpers.isError(invalidEmail)).to.equal(false);
        expect(globalHelpers.isError(emptyStr)).to.equal(false);
        expect(globalHelpers.isError(newError)).to.equal(true);
        expect(globalHelpers.isError(newTypeError)).to.equal(true);
        expect(globalHelpers.isError(fn)).to.equal(false);
        expect(globalHelpers.isError(arrowFn)).to.equal(false);
        expect(globalHelpers.isError(json)).to.equal(false);
        expect(globalHelpers.isError(_null)).to.equal(false);
        expect(globalHelpers.isError(number)).to.equal(false);
        expect(globalHelpers.isError(_Number)).to.equal(false);
        expect(globalHelpers.isError(int)).to.equal(false);
        expect(globalHelpers.isError(float)).to.equal(false);
        expect(globalHelpers.isError(obj)).to.equal(false);
        expect(globalHelpers.isError(newObj)).to.equal(false);
        expect(globalHelpers.isError(regexp)).to.equal(false);
        expect(globalHelpers.isError(newRegexp)).to.equal(false);
        expect(globalHelpers.isError(string)).to.equal(false);
        expect(globalHelpers.isError(_undefined)).to.equal(false);
        done();
    });

    it('is function', (done) => {
        expect(globalHelpers.isFunction(arr)).to.equal(false);
        expect(globalHelpers.isFunction(newArr)).to.equal(false);
        expect(globalHelpers.isFunction(_true)).to.equal(false);
        expect(globalHelpers.isFunction(_false)).to.equal(false);
        expect(globalHelpers.isFunction(newTrue)).to.equal(false);
        expect(globalHelpers.isFunction(newFalse)).to.equal(false);
        expect(globalHelpers.isFunction(charLower)).to.equal(false);
        expect(globalHelpers.isFunction(charUpper)).to.equal(false);
        expect(globalHelpers.isFunction(date)).to.equal(false);
        expect(globalHelpers.isFunction(body)).to.equal(false);
        expect(globalHelpers.isFunction(validEmail)).to.equal(false);
        expect(globalHelpers.isFunction(invalidEmail)).to.equal(false);
        expect(globalHelpers.isFunction(emptyStr)).to.equal(false);
        expect(globalHelpers.isFunction(newError)).to.equal(false);
        expect(globalHelpers.isFunction(newTypeError)).to.equal(false);
        expect(globalHelpers.isFunction(fn)).to.equal(true);
        expect(globalHelpers.isFunction(arrowFn)).to.equal(true);
        expect(globalHelpers.isFunction(json)).to.equal(false);
        expect(globalHelpers.isFunction(_null)).to.equal(false);
        expect(globalHelpers.isFunction(number)).to.equal(false);
        expect(globalHelpers.isFunction(_Number)).to.equal(false);
        expect(globalHelpers.isFunction(int)).to.equal(false);
        expect(globalHelpers.isFunction(float)).to.equal(false);
        expect(globalHelpers.isFunction(obj)).to.equal(false);
        expect(globalHelpers.isFunction(newObj)).to.equal(false);
        expect(globalHelpers.isFunction(regexp)).to.equal(false);
        expect(globalHelpers.isFunction(newRegexp)).to.equal(false);
        expect(globalHelpers.isFunction(string)).to.equal(false);
        expect(globalHelpers.isFunction(_undefined)).to.equal(false);
        done();
    });

    it('is json', (done) => {
        expect(globalHelpers.isJson(arr)).to.equal(false);
        expect(globalHelpers.isJson(newArr)).to.equal(false);
        expect(globalHelpers.isJson(_true)).to.equal(false);
        expect(globalHelpers.isJson(_false)).to.equal(false);
        expect(globalHelpers.isJson(newTrue)).to.equal(false);
        expect(globalHelpers.isJson(newFalse)).to.equal(false);
        expect(globalHelpers.isJson(charLower)).to.equal(false);
        expect(globalHelpers.isJson(charUpper)).to.equal(false);
        expect(globalHelpers.isJson(date)).to.equal(false);
        expect(globalHelpers.isJson(body)).to.equal(false);
        expect(globalHelpers.isJson(validEmail)).to.equal(false);
        expect(globalHelpers.isJson(invalidEmail)).to.equal(false);
        expect(globalHelpers.isJson(emptyStr)).to.equal(false);
        expect(globalHelpers.isJson(newError)).to.equal(false);
        expect(globalHelpers.isJson(newTypeError)).to.equal(false);
        expect(globalHelpers.isJson(fn)).to.equal(false);
        expect(globalHelpers.isJson(arrowFn)).to.equal(false);
        expect(globalHelpers.isJson(json)).to.equal(true);
        expect(globalHelpers.isJson(_null)).to.equal(false);
        expect(globalHelpers.isJson(number)).to.equal(false);
        expect(globalHelpers.isJson(_Number)).to.equal(false);
        expect(globalHelpers.isJson(int)).to.equal(false);
        expect(globalHelpers.isJson(float)).to.equal(false);
        expect(globalHelpers.isJson(obj)).to.equal(false);
        expect(globalHelpers.isJson(newObj)).to.equal(false);
        expect(globalHelpers.isJson(regexp)).to.equal(false);
        expect(globalHelpers.isJson(newRegexp)).to.equal(false);
        expect(globalHelpers.isJson(string)).to.equal(false);
        expect(globalHelpers.isJson(_undefined)).to.equal(false);
        done();
    });

    it('is null', (done) => {
        expect(globalHelpers.isNull(arr)).to.equal(false);
        expect(globalHelpers.isNull(newArr)).to.equal(false);
        expect(globalHelpers.isNull(_true)).to.equal(false);
        expect(globalHelpers.isNull(_false)).to.equal(false);
        expect(globalHelpers.isNull(newTrue)).to.equal(false);
        expect(globalHelpers.isNull(newFalse)).to.equal(false);
        expect(globalHelpers.isNull(charLower)).to.equal(false);
        expect(globalHelpers.isNull(charUpper)).to.equal(false);
        expect(globalHelpers.isNull(date)).to.equal(false);
        expect(globalHelpers.isNull(body)).to.equal(false);
        expect(globalHelpers.isNull(validEmail)).to.equal(false);
        expect(globalHelpers.isNull(invalidEmail)).to.equal(false);
        expect(globalHelpers.isNull(emptyStr)).to.equal(false);
        expect(globalHelpers.isNull(newError)).to.equal(false);
        expect(globalHelpers.isNull(newTypeError)).to.equal(false);
        expect(globalHelpers.isNull(fn)).to.equal(false);
        expect(globalHelpers.isNull(arrowFn)).to.equal(false);
        expect(globalHelpers.isNull(json)).to.equal(false);
        expect(globalHelpers.isNull(_null)).to.equal(true);
        expect(globalHelpers.isNull(number)).to.equal(false);
        expect(globalHelpers.isNull(_Number)).to.equal(false);
        expect(globalHelpers.isNull(int)).to.equal(false);
        expect(globalHelpers.isNull(float)).to.equal(false);
        expect(globalHelpers.isNull(obj)).to.equal(false);
        expect(globalHelpers.isNull(newObj)).to.equal(false);
        expect(globalHelpers.isNull(regexp)).to.equal(false);
        expect(globalHelpers.isNull(newRegexp)).to.equal(false);
        expect(globalHelpers.isNull(string)).to.equal(false);
        expect(globalHelpers.isNull(_undefined)).to.equal(false);
        done();
    });

    it('is number', (done) => {
        expect(globalHelpers.isNumber(arr)).to.equal(false);
        expect(globalHelpers.isNumber(newArr)).to.equal(false);
        expect(globalHelpers.isNumber(_true)).to.equal(false);
        expect(globalHelpers.isNumber(_false)).to.equal(false);
        expect(globalHelpers.isNumber(newTrue)).to.equal(false);
        expect(globalHelpers.isNumber(newFalse)).to.equal(false);
        expect(globalHelpers.isNumber(charLower)).to.equal(false);
        expect(globalHelpers.isNumber(charUpper)).to.equal(false);
        expect(globalHelpers.isNumber(date)).to.equal(false);
        expect(globalHelpers.isNumber(body)).to.equal(false);
        expect(globalHelpers.isNumber(validEmail)).to.equal(false);
        expect(globalHelpers.isNumber(invalidEmail)).to.equal(false);
        expect(globalHelpers.isNumber(emptyStr)).to.equal(false);
        expect(globalHelpers.isNumber(newError)).to.equal(false);
        expect(globalHelpers.isNumber(newTypeError)).to.equal(false);
        expect(globalHelpers.isNumber(fn)).to.equal(false);
        expect(globalHelpers.isNumber(arrowFn)).to.equal(false);
        expect(globalHelpers.isNumber(json)).to.equal(false);
        expect(globalHelpers.isNumber(_null)).to.equal(false);
        expect(globalHelpers.isNumber(number)).to.equal(true);
        expect(globalHelpers.isNumber(_Number)).to.equal(true);
        expect(globalHelpers.isNumber(int)).to.equal(true);
        expect(globalHelpers.isNumber(float)).to.equal(true);
        expect(globalHelpers.isNumber(obj)).to.equal(false);
        expect(globalHelpers.isNumber(newObj)).to.equal(false);
        expect(globalHelpers.isNumber(regexp)).to.equal(false);
        expect(globalHelpers.isNumber(newRegexp)).to.equal(false);
        expect(globalHelpers.isNumber(string)).to.equal(false);
        expect(globalHelpers.isNumber(_undefined)).to.equal(false);
        done();
    });

    it('is object', (done) => {
        expect(globalHelpers.isObject(arr)).to.equal(true);
        expect(globalHelpers.isObject(newArr)).to.equal(true);
        expect(globalHelpers.isObject(_true)).to.equal(false);
        expect(globalHelpers.isObject(_false)).to.equal(false);
        expect(globalHelpers.isObject(newTrue)).to.equal(true);
        expect(globalHelpers.isObject(newFalse)).to.equal(true);
        expect(globalHelpers.isObject(charLower)).to.equal(false);
        expect(globalHelpers.isObject(charUpper)).to.equal(false);
        expect(globalHelpers.isObject(date)).to.equal(true);
        expect(globalHelpers.isObject(body)).to.equal(true);
        expect(globalHelpers.isObject(validEmail)).to.equal(false);
        expect(globalHelpers.isObject(invalidEmail)).to.equal(false);
        expect(globalHelpers.isObject(emptyStr)).to.equal(false);
        expect(globalHelpers.isObject(newError)).to.equal(true);
        expect(globalHelpers.isObject(newTypeError)).to.equal(true);
        expect(globalHelpers.isObject(fn)).to.equal(false);
        expect(globalHelpers.isObject(arrowFn)).to.equal(false);
        expect(globalHelpers.isObject(json)).to.equal(false);
        expect(globalHelpers.isObject(_null)).to.equal(false);
        expect(globalHelpers.isObject(number)).to.equal(false);
        expect(globalHelpers.isObject(_Number)).to.equal(false);
        expect(globalHelpers.isObject(int)).to.equal(false);
        expect(globalHelpers.isObject(float)).to.equal(false);
        expect(globalHelpers.isObject(obj)).to.equal(true);
        expect(globalHelpers.isObject(newObj)).to.equal(true);
        expect(globalHelpers.isObject(regexp)).to.equal(true);
        expect(globalHelpers.isObject(newRegexp)).to.equal(true);
        expect(globalHelpers.isObject(string)).to.equal(false);
        expect(globalHelpers.isObject(_undefined)).to.equal(false);
        done();
    });

    it('is object empty', (done) => {
        expect(globalHelpers.isObjectEmpty(arr)).to.equal(true);
        expect(globalHelpers.isObjectEmpty(newArr)).to.equal(true);
        expect(globalHelpers.isObjectEmpty(_true)).to.equal(false);
        expect(globalHelpers.isObjectEmpty(_false)).to.equal(false);
        expect(globalHelpers.isObjectEmpty(newTrue)).to.equal(true);
        expect(globalHelpers.isObjectEmpty(newFalse)).to.equal(true);
        expect(globalHelpers.isObjectEmpty(charLower)).to.equal(false);
        expect(globalHelpers.isObjectEmpty(charUpper)).to.equal(false);
        expect(globalHelpers.isObjectEmpty(date)).to.equal(true);
        expect(globalHelpers.isObjectEmpty(body)).to.equal(true);
        expect(globalHelpers.isObjectEmpty(validEmail)).to.equal(false);
        expect(globalHelpers.isObjectEmpty(invalidEmail)).to.equal(false);
        expect(globalHelpers.isObjectEmpty(emptyStr)).to.equal(false);
        expect(globalHelpers.isObjectEmpty(newError)).to.equal(true);
        expect(globalHelpers.isObjectEmpty(newTypeError)).to.equal(true);
        expect(globalHelpers.isObjectEmpty(fn)).to.equal(false);
        expect(globalHelpers.isObjectEmpty(arrowFn)).to.equal(false);
        expect(globalHelpers.isObjectEmpty(json)).to.equal(false);
        expect(globalHelpers.isObjectEmpty(_null)).to.equal(false);
        expect(globalHelpers.isObjectEmpty(number)).to.equal(false);
        expect(globalHelpers.isObjectEmpty(_Number)).to.equal(false);
        expect(globalHelpers.isObjectEmpty(int)).to.equal(false);
        expect(globalHelpers.isObjectEmpty(float)).to.equal(false);
        expect(globalHelpers.isObjectEmpty(obj)).to.equal(true);
        expect(globalHelpers.isObjectEmpty(newObj)).to.equal(true);
        expect(globalHelpers.isObjectEmpty(regexp)).to.equal(true);
        expect(globalHelpers.isObjectEmpty(newRegexp)).to.equal(true);
        expect(globalHelpers.isObjectEmpty(string)).to.equal(false);
        expect(globalHelpers.isObjectEmpty(_undefined)).to.equal(false);
        done();
    });

    it('is plain object', (done) => {
        expect(globalHelpers.isPlainObject(arr)).to.equal(false);
        expect(globalHelpers.isPlainObject(newArr)).to.equal(false);
        expect(globalHelpers.isPlainObject(_true)).to.equal(false);
        expect(globalHelpers.isPlainObject(_false)).to.equal(false);
        expect(globalHelpers.isPlainObject(newTrue)).to.equal(false);
        expect(globalHelpers.isPlainObject(newFalse)).to.equal(false);
        expect(globalHelpers.isPlainObject(charLower)).to.equal(false);
        expect(globalHelpers.isPlainObject(charUpper)).to.equal(false);
        expect(globalHelpers.isPlainObject(date)).to.equal(false);
        expect(globalHelpers.isPlainObject(body)).to.equal(false);
        expect(globalHelpers.isPlainObject(validEmail)).to.equal(false);
        expect(globalHelpers.isPlainObject(invalidEmail)).to.equal(false);
        expect(globalHelpers.isPlainObject(emptyStr)).to.equal(false);
        expect(globalHelpers.isPlainObject(newError)).to.equal(false);
        expect(globalHelpers.isPlainObject(newTypeError)).to.equal(false);
        expect(globalHelpers.isPlainObject(fn)).to.equal(false);
        expect(globalHelpers.isPlainObject(arrowFn)).to.equal(false);
        expect(globalHelpers.isPlainObject(json)).to.equal(false);
        expect(globalHelpers.isPlainObject(_null)).to.equal(false);
        expect(globalHelpers.isPlainObject(number)).to.equal(false);
        expect(globalHelpers.isPlainObject(_Number)).to.equal(false);
        expect(globalHelpers.isPlainObject(int)).to.equal(false);
        expect(globalHelpers.isPlainObject(float)).to.equal(false);
        expect(globalHelpers.isPlainObject(obj)).to.equal(true);
        expect(globalHelpers.isPlainObject(newObj)).to.equal(true);
        expect(globalHelpers.isPlainObject(regexp)).to.equal(false);
        expect(globalHelpers.isPlainObject(newRegexp)).to.equal(false);
        expect(globalHelpers.isPlainObject(string)).to.equal(false);
        expect(globalHelpers.isPlainObject(_undefined)).to.equal(false);
        done();
    });

    it('is regexp', (done) => {
        expect(globalHelpers.isRegexp(arr)).to.equal(false);
        expect(globalHelpers.isRegexp(newArr)).to.equal(false);
        expect(globalHelpers.isRegexp(_true)).to.equal(false);
        expect(globalHelpers.isRegexp(_false)).to.equal(false);
        expect(globalHelpers.isRegexp(newTrue)).to.equal(false);
        expect(globalHelpers.isRegexp(newFalse)).to.equal(false);
        expect(globalHelpers.isRegexp(charLower)).to.equal(false);
        expect(globalHelpers.isRegexp(charUpper)).to.equal(false);
        expect(globalHelpers.isRegexp(date)).to.equal(false);
        expect(globalHelpers.isRegexp(body)).to.equal(false);
        expect(globalHelpers.isRegexp(validEmail)).to.equal(false);
        expect(globalHelpers.isRegexp(invalidEmail)).to.equal(false);
        expect(globalHelpers.isRegexp(emptyStr)).to.equal(false);
        expect(globalHelpers.isRegexp(newError)).to.equal(false);
        expect(globalHelpers.isRegexp(newTypeError)).to.equal(false);
        expect(globalHelpers.isRegexp(fn)).to.equal(false);
        expect(globalHelpers.isRegexp(arrowFn)).to.equal(false);
        expect(globalHelpers.isRegexp(json)).to.equal(false);
        expect(globalHelpers.isRegexp(_null)).to.equal(false);
        expect(globalHelpers.isRegexp(number)).to.equal(false);
        expect(globalHelpers.isRegexp(_Number)).to.equal(false);
        expect(globalHelpers.isRegexp(int)).to.equal(false);
        expect(globalHelpers.isRegexp(float)).to.equal(false);
        expect(globalHelpers.isRegexp(obj)).to.equal(false);
        expect(globalHelpers.isRegexp(newObj)).to.equal(false);
        expect(globalHelpers.isRegexp(regexp)).to.equal(true);
        expect(globalHelpers.isRegexp(newRegexp)).to.equal(true);
        expect(globalHelpers.isRegexp(string)).to.equal(false);
        expect(globalHelpers.isRegexp(_undefined)).to.equal(false);
        done();
    });

    it('is string', (done) => {
        expect(globalHelpers.isString(arr)).to.equal(false);
        expect(globalHelpers.isString(newArr)).to.equal(false);
        expect(globalHelpers.isString(_true)).to.equal(false);
        expect(globalHelpers.isString(_false)).to.equal(false);
        expect(globalHelpers.isString(newTrue)).to.equal(false);
        expect(globalHelpers.isString(newFalse)).to.equal(false);
        expect(globalHelpers.isString(charLower)).to.equal(true);
        expect(globalHelpers.isString(charUpper)).to.equal(true);
        expect(globalHelpers.isString(date)).to.equal(false);
        expect(globalHelpers.isString(body)).to.equal(false);
        expect(globalHelpers.isString(validEmail)).to.equal(true);
        expect(globalHelpers.isString(invalidEmail)).to.equal(true);
        expect(globalHelpers.isString(emptyStr)).to.equal(true);
        expect(globalHelpers.isString(newError)).to.equal(false);
        expect(globalHelpers.isString(newTypeError)).to.equal(false);
        expect(globalHelpers.isString(fn)).to.equal(false);
        expect(globalHelpers.isString(arrowFn)).to.equal(false);
        expect(globalHelpers.isString(json)).to.equal(true);
        expect(globalHelpers.isString(_null)).to.equal(false);
        expect(globalHelpers.isString(number)).to.equal(false);
        expect(globalHelpers.isString(_Number)).to.equal(false);
        expect(globalHelpers.isString(int)).to.equal(false);
        expect(globalHelpers.isString(float)).to.equal(false);
        expect(globalHelpers.isString(obj)).to.equal(false);
        expect(globalHelpers.isString(newObj)).to.equal(false);
        expect(globalHelpers.isString(regexp)).to.equal(false);
        expect(globalHelpers.isString(newRegexp)).to.equal(false);
        expect(globalHelpers.isString(string)).to.equal(true);
        expect(globalHelpers.isString(_undefined)).to.equal(false);
        done();
    });

    it('is undefined', (done) => {
        expect(globalHelpers.isUndefined(arr)).to.equal(false);
        expect(globalHelpers.isUndefined(newArr)).to.equal(false);
        expect(globalHelpers.isUndefined(_true)).to.equal(false);
        expect(globalHelpers.isUndefined(_false)).to.equal(false);
        expect(globalHelpers.isUndefined(newTrue)).to.equal(false);
        expect(globalHelpers.isUndefined(newFalse)).to.equal(false);
        expect(globalHelpers.isUndefined(charLower)).to.equal(false);
        expect(globalHelpers.isUndefined(charUpper)).to.equal(false);
        expect(globalHelpers.isUndefined(date)).to.equal(false);
        expect(globalHelpers.isUndefined(body)).to.equal(false);
        expect(globalHelpers.isUndefined(validEmail)).to.equal(false);
        expect(globalHelpers.isUndefined(invalidEmail)).to.equal(false);
        expect(globalHelpers.isUndefined(emptyStr)).to.equal(false);
        expect(globalHelpers.isUndefined(newError)).to.equal(false);
        expect(globalHelpers.isUndefined(newTypeError)).to.equal(false);
        expect(globalHelpers.isUndefined(fn)).to.equal(false);
        expect(globalHelpers.isUndefined(arrowFn)).to.equal(false);
        expect(globalHelpers.isUndefined(json)).to.equal(false);
        expect(globalHelpers.isUndefined(_null)).to.equal(false);
        expect(globalHelpers.isUndefined(number)).to.equal(false);
        expect(globalHelpers.isUndefined(_Number)).to.equal(false);
        expect(globalHelpers.isUndefined(int)).to.equal(false);
        expect(globalHelpers.isUndefined(float)).to.equal(false);
        expect(globalHelpers.isUndefined(obj)).to.equal(false);
        expect(globalHelpers.isUndefined(newObj)).to.equal(false);
        expect(globalHelpers.isUndefined(regexp)).to.equal(false);
        expect(globalHelpers.isUndefined(newRegexp)).to.equal(false);
        expect(globalHelpers.isUndefined(string)).to.equal(false);
        expect(globalHelpers.isUndefined(_undefined)).to.equal(true);
        done();
    });
});
